name: Deploy Preview

on:
  issue_comment:
    types: [ created ]
  workflow_dispatch:

jobs:

  deploy-preview:
    name: Deploy Preview
    runs-on: self-hosted
    if: github.event_name != 'issue_comment' || github.event.comment.body == '/deploy'
    steps:
      - name: Get branch name
        id: branch_name
        uses: tj-actions/branch-names@v4.5
        if: github.event_name != 'issue_comment'

      - name: Set variables
        run: |
          echo "DOCKER_IMAGE=eduardohmg/actions-test:${{ steps.branch_name.outputs.current_branch }}" >> $GITHUB_ENV
          echo "PREVIEW_NAME=${{ steps.branch_name.outputs.current_branch }}" >> $GITHUB_ENV
        if: github.event_name != 'issue_comment'

      - name: Get branch name for comment event
        uses: xt0rted/pull-request-comment-branch@v1.3.0
        id: comment_branch
        if: github.event_name == 'issue_comment'

      - name: Set variables for comment event
        run: |
          echo "DOCKER_IMAGE=eduardohmg/actions-test:${{ steps.comment_branch.outputs.head_ref }}" >> $GITHUB_ENV
          echo "PREVIEW_NAME=${{ steps.comment_branch.outputs.head_ref }}" >> $GITHUB_ENV
          echo "CURRENT_SHA=${{ steps.comment_branch.outputs.head_sha }}" >> $GITHUB_ENV
        if: github.event_name == 'issue_comment'

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Test XYZ
          conclusion: ${{ job.status }}
          output: |
            {"summary": "Olá, teste."}

      - uses: LouisBrunner/checks-action@v1.1.1
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Test XYZ
          sha: ${{ env.CURRENT_SHA }}
          conclusion: ${{ job.status }}
          output: |
            {"summary": "Olá, teste."}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image
        run: docker pull ${{ env.DOCKER_IMAGE }}

      - name: Start deployment
        uses: bobheadxi/deployments@v0.6.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.PREVIEW_NAME }}

      - name: Stop instance if already exists
        run: docker ps -q --filter "name=${{ env.PREVIEW_NAME }}" | grep -q . && docker rm -f ${{ env.PREVIEW_NAME }} || echo Not Found

      - name: Run instance
        run: |
          docker run --rm -d -P \
            -l traefik.enable=true \
            -l traefik.frontend.rule=Host:${{ env.PREVIEW_NAME }}.dev.loc \
            -l traefik.protocol=http \
            --name ${{ env.PREVIEW_NAME }} \
            ${{ env.DOCKER_IMAGE }}
        if: always()

      - name: Update deployment status
        uses: bobheadxi/deployments@v0.6.0
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: 'http://${{ env.PREVIEW_NAME }}.dev.loc'

      - name: Update checks
        uses: LouisBrunner/checks-action@v1.1.2
        if: always()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Deployment
          conclusion: ${{ job.status }}
          output: |
            {"summary":"Deployed on: http://${{ env.PREVIEW_NAME }}.dev.loc"}
